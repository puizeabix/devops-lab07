name: Pull Request Workflow

on: 
  pull_request:
    types:
      - "opened"
  workflow_dispatch:
    

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: './src/go.mod'
      - run: go mod tidy
        working-directory: ./src
      - run: go test ./...
        working-directory: ./src
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: './src/go.mod'
      - run: go mod tidy
        working-directory: ./src
        name: Download libraries
      - run: go test -coverprofile coverage.out ./...
        working-directory: ./src
        name: Code Coverage Checking
      - run: go tool cover -func coverage.out -o coverage.txt
        working-directory: ./src
        name: Convert Code Coverage Report format
      - uses: actions/upload-artifact@v3
        name: Store code coverage report 
        with:
          name: code-coverage-report
          path: src/coverage.txt


  quality-gate:
    runs-on: ubuntu-latest
    needs: ["coverage", "unittest"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: src/coverage.txt
      - run: python coverage.py 1
        working-directory: ./src
        name: Simple Quality Gate

  comment:
    runs-on: ubuntu-latest
    needs: ["quality-gate"]
    steps:
      - uses: actions/script@v3
        with:
          script: |
            github.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'All Quality Gates is passed'
            })